#!/usr/bin/env node

var program = require('commander'),
  path = require('path'),
  fs = require('fs'),
  glob = require('glob'),
  resolve = path.resolve,
  relative = path.relative,
  exists = fs.existsSync || path.existsSync,
  Cleaner = require('../').Cleaner,
  join = path.join,
  basename = path.basename,
  dirname = path.dirname,
  mkdirp = require('mkdirp').sync,
  basePath = process.cwd(),
  sourceMapBasePath = process.cwd(),
  cleaner = new Cleaner,
  files = [];
var input, output, outputIsDir, outputPath, fileName, options;

/**
 * Outputs an error
 *
 * @method error
 * @param message
 * @param code
 */
function error(message, code) {
  process.stderr.write('' + message);
  console.log();
  process.exit(code || 1);
}
process.on('error', function (err) {
  error(err);
});

/**
 * Grab all files from given path
 *
 * @method lookupFiles
 * @param {String} path
 * @param {Boolean} recursive
 * @returns {Array.<String>}
 */
function lookupFiles(path, recursive) {
  var files = [];
  var re = /\.css$/i;

  if (!exists(path)) {
    if (exists(path + '.css')) {
      path += '.css';
    }
    else {
      files = glob.sync(path);
      if (!files.length) {
        error("cannot resolve path (or pattern) '" + path + "'");
      }
      return files;
    }
  }

  try {
    var stat = fs.statSync(path);
    if (stat.isFile()) return path;
  }
  catch (ignored) {
    return;
  }

  fs.readdirSync(path).forEach(function (file) {
    file = join(path, file);
    try {
      var stat = fs.statSync(file);
      if (stat.isDirectory()) {
        if (recursive) {
          files = files.concat(lookupFiles(file, recursive));
        }
        return;
      }
    }
    catch (ignored) {
      return;
    }
    if (!stat.isFile() || !re.test(file) || basename(file)[0] === '.') return;
    files.push(file);
  });

  return files;
}


// define our program
program
  .version(require('../package.json').version)
  .usage('[options] [files]')
  .option('-o, --output <path>', 'path where the output file(s) will be generated (file or path)')
  .option('-b, --base-path <path>', 'base path when `output` is a directory, default to current directory')
  .option('-m, --source-map [path]', 'generates source-map, relative to current directory or given path')
  .option('-r, --recursive', 'include sub directories');
program.name = 'css-unprefix';


// parse arguments
program.parse(process.argv);
var args = program.args;
if (!args.length) {
  error('no input file');
}
args.forEach(function (arg) {
  files = files.concat(lookupFiles(arg, program.recursive));
});
files = files.map(function (path) {
  return resolve(path);
});


// output
if (program.output) {
  outputPath = resolve(basePath, program.output);
  outputIsDir = !(/\.css$/i.test(outputPath) && (!exists(outputPath) || !fs.statSync(outputPath).isDirectory()));
}
else {
  outputPath = null;
  if (program.soureMap) {
    error('you must specify the output destination to generate the source-map');
  }
}

// source-map base bath
if (typeof program.sourceMap === 'string') {
  sourceMapBasePath = resolve(basePath, program.sourceMap);
}
// base path
if (program.basePath) {
  basePath = resolve(basePath, program.basePath);
}


// handles un-prefixing
for (var i = 0; i < files.length; i++) {
  // input is our source
  input = fs.readFileSync(files[i], {encoding: 'utf8'});
  // fileName is the path to our file relatively to the basePath
  fileName = relative(sourceMapBasePath, files[i]);
  // options are parsing and linting options
  options = {source: fileName, sourcemap: !!program.sourceMap};
  if (outputPath) {
    // if we have an outputPath it is not for STDOUT
    if (outputIsDir) {
      // if the output is a directory, we do not concatenate all files
      // output is our linted CSS
      output = cleaner.lintCss(input, options);
      // filename is now the path to the output file
      fileName = dirname(resolve(outputPath, relative(basePath, files[i])));
      if (!exists(fileName)) {
        // we create the directory if it does not exists
        mkdirp(fileName);
      }
      // then finally add the file name without extension
      fileName = join(fileName, basename(files[i]));
      if (options.sourcemap) {
        // if we have to handle source map
        fs.writeFileSync(
          fileName,
          output.code + '\n/*# sourceMappingURL=' + basename(fileName) + '.map*/\n',
          {encoding: 'utf8'}
        );
        fs.writeFileSync(fileName + '.map', JSON.stringify(output.map), {encoding: 'utf8'});
      }
      else {
        // just handle the output CSS, no source map
        fs.writeFileSync(fileName, output, {encoding: 'utf8'});
      }
    }
    else {
      // outputPath is a file, we need to concatenate all input files together
      cleaner.appendCss(input, options);
    }
  }
  else {
    // no outputPath, for STDOUT
    output = cleaner.lintCss(input, options);
    process.stdout.write(output + '\n');
  }
}

if (outputPath && !outputIsDir) {
  // if the outputPath was a file
  try {
    // try to lint the concatenated AST of all files
    output = cleaner.lint().stringify({sourcemap: !!program.sourceMap});
  }
  catch (err) {
    error(err);
  }
  // get the path to the output file
  fileName = dirname(outputPath);
  if (!exists(fileName)) {
    mkdirp(fileName);
  }
  if (options.sourcemap) {
    // handle source map
    fs.writeFileSync(
      outputPath,
      output.code + '\n/*# sourceMappingURL=' + basename(outputPath) + '.map*/\n',
      {encoding: 'utf8'}
    );
    fs.writeFileSync(outputPath + '.map', JSON.stringify(output.map), {encoding: 'utf8'});
  }
  else {
    // no source map
    fs.writeFileSync(outputPath, output, {encoding: 'utf8'});
  }
}
